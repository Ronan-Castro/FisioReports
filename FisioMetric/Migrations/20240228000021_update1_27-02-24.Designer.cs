// <auto-generated />
using System;
using FisioMetric.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FisioMetric.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20240228000021_update1_27-02-24")]
    partial class update1_270224
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("FisioMetric.Models.Entidades.Avaliacao", b =>
                {
                    b.Property<int>("IdAvaliacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAtendimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiagClinico")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiagFisioterapeutico")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObjetivoPessoal")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObjetivoTerapeutico")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacaoDoenca")
                        .HasColumnType("TEXT");

                    b.Property<string>("QueixaPrincipal")
                        .HasColumnType("TEXT");

                    b.Property<string>("TratamentoAnterior")
                        .HasColumnType("TEXT");

                    b.HasKey("IdAvaliacao");

                    b.HasAlternateKey("IdPaciente");

                    b.ToTable("avaliacoes", (string)null);
                });

            modelBuilder.Entity("FisioMetric.Models.Entidades.Evolucao", b =>
                {
                    b.Property<int>("IdEvolucao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Anotacoes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Aparelho")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClienteChegou")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClienteSaiu")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataAtividade")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fisioterapeuta")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdEvolucao");

                    b.HasAlternateKey("IdPaciente");

                    b.ToTable("evolucoes", (string)null);
                });

            modelBuilder.Entity("FisioMetric.Models.Entidades.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUltimaAtividade")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUltimaAvaliacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Profissao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PacienteId");

                    b.ToTable("pacientes", (string)null);
                });

            modelBuilder.Entity("FisioMetric.Models.Entidades.Avaliacao", b =>
                {
                    b.HasOne("FisioMetric.Models.Entidades.Paciente", "Paciente")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FisioMetric.Models.Entidades.DoencasCondicoes", "DoencasCondicoes", b1 =>
                        {
                            b1.Property<int>("AvaliacaoIdAvaliacao")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Cardiaca")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Cardiopatia")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Cirurgias")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Covid")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Dermatologica")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Diabete")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("DoencasHereditarias")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Endocrina")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("GastroIntestinal")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Gestacao")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Hipertensao")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Metabolica")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Neoplasias")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Neurologicas")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Respiratorias")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Vasculares")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Visual")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AvaliacaoIdAvaliacao");

                            b1.ToTable("avaliacoes");

                            b1.WithOwner()
                                .HasForeignKey("AvaliacaoIdAvaliacao");
                        });

                    b.OwnsOne("FisioMetric.Models.Entidades.ExameFisico", "ExameFisico", b1 =>
                        {
                            b1.Property<int>("AvaliacaoIdAvaliacao")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Equilibrio")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("EstabilidadeEscapular")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("FroxidaoLigamentar")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("MobilidadeColuna")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AvaliacaoIdAvaliacao");

                            b1.ToTable("avaliacoes");

                            b1.WithOwner()
                                .HasForeignKey("AvaliacaoIdAvaliacao");

                            b1.OwnsOne("FisioMetric.Models.Entidades.Cabeca", "Cabeca", b2 =>
                                {
                                    b2.Property<int>("ExameFisicoAvaliacaoIdAvaliacao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsInclinadaDireita")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsInclinadaEsquerda")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsNormal")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("ExameFisicoAvaliacaoIdAvaliacao");

                                    b2.ToTable("avaliacoes");

                                    b2.WithOwner()
                                        .HasForeignKey("ExameFisicoAvaliacaoIdAvaliacao");
                                });

                            b1.OwnsOne("FisioMetric.Models.Entidades.Cervical", "Cervical", b2 =>
                                {
                                    b2.Property<int>("ExameFisicoAvaliacaoIdAvaliacao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsAnteriorizada")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsNormal")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsRetificada")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("ExameFisicoAvaliacaoIdAvaliacao");

                                    b2.ToTable("avaliacoes");

                                    b2.WithOwner()
                                        .HasForeignKey("ExameFisicoAvaliacaoIdAvaliacao");
                                });

                            b1.OwnsOne("FisioMetric.Models.Entidades.Coluna", "Coluna", b2 =>
                                {
                                    b2.Property<int>("ExameFisicoAvaliacaoIdAvaliacao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsEscoliose")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsHipercifose")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsHiperlordose")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsNormal")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("ExameFisicoAvaliacaoIdAvaliacao");

                                    b2.ToTable("avaliacoes");

                                    b2.WithOwner()
                                        .HasForeignKey("ExameFisicoAvaliacaoIdAvaliacao");
                                });

                            b1.OwnsOne("FisioMetric.Models.Entidades.Joelhos", "Joelhos", b2 =>
                                {
                                    b2.Property<int>("ExameFisicoAvaliacaoIdAvaliacao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsNormal")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsValgo")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsVaro")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("ExameFisicoAvaliacaoIdAvaliacao");

                                    b2.ToTable("avaliacoes");

                                    b2.WithOwner()
                                        .HasForeignKey("ExameFisicoAvaliacaoIdAvaliacao");
                                });

                            b1.OwnsOne("FisioMetric.Models.Entidades.Ombros", "Ombros", b2 =>
                                {
                                    b2.Property<int>("ExameFisicoAvaliacaoIdAvaliacao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsAnteriorizada")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsElevadoDireito")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsElevadoEsquerdo")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsEscapulaAlada")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsNormal")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("ExameFisicoAvaliacaoIdAvaliacao");

                                    b2.ToTable("avaliacoes");

                                    b2.WithOwner()
                                        .HasForeignKey("ExameFisicoAvaliacaoIdAvaliacao");
                                });

                            b1.OwnsOne("FisioMetric.Models.Entidades.PadraoMovimento", "PadraoMovimento", b2 =>
                                {
                                    b2.Property<int>("ExameFisicoAvaliacaoIdAvaliacao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsMaleavel")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsNormal")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsRigido")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("ExameFisicoAvaliacaoIdAvaliacao");

                                    b2.ToTable("avaliacoes");

                                    b2.WithOwner()
                                        .HasForeignKey("ExameFisicoAvaliacaoIdAvaliacao");
                                });

                            b1.OwnsOne("FisioMetric.Models.Entidades.Pelve", "Pelve", b2 =>
                                {
                                    b2.Property<int>("ExameFisicoAvaliacaoIdAvaliacao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsAnteversao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsElevadoDireita")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsElevadoEsquerda")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsEscoliose")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsNormal")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsRetroversao")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("ExameFisicoAvaliacaoIdAvaliacao");

                                    b2.ToTable("avaliacoes");

                                    b2.WithOwner()
                                        .HasForeignKey("ExameFisicoAvaliacaoIdAvaliacao");
                                });

                            b1.OwnsOne("FisioMetric.Models.Entidades.Pes", "Pes", b2 =>
                                {
                                    b2.Property<int>("ExameFisicoAvaliacaoIdAvaliacao")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsNormal")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsValgo")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsVaro")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("ExameFisicoAvaliacaoIdAvaliacao");

                                    b2.ToTable("avaliacoes");

                                    b2.WithOwner()
                                        .HasForeignKey("ExameFisicoAvaliacaoIdAvaliacao");
                                });

                            b1.Navigation("Cabeca")
                                .IsRequired();

                            b1.Navigation("Cervical")
                                .IsRequired();

                            b1.Navigation("Coluna")
                                .IsRequired();

                            b1.Navigation("Joelhos")
                                .IsRequired();

                            b1.Navigation("Ombros")
                                .IsRequired();

                            b1.Navigation("PadraoMovimento")
                                .IsRequired();

                            b1.Navigation("Pelve")
                                .IsRequired();

                            b1.Navigation("Pes")
                                .IsRequired();
                        });

                    b.OwnsOne("FisioMetric.Models.Entidades.HabitosVida", "HabitosVida", b1 =>
                        {
                            b1.Property<int>("AvaliacaoIdAvaliacao")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("AtivFisica")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Etilismo")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IngereAgua")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Intestino")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Medicacao")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ObsHabitos")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("Pilates")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("Tabagismo")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AvaliacaoIdAvaliacao");

                            b1.ToTable("avaliacoes");

                            b1.WithOwner()
                                .HasForeignKey("AvaliacaoIdAvaliacao");
                        });

                    b.Navigation("DoencasCondicoes")
                        .IsRequired();

                    b.Navigation("ExameFisico")
                        .IsRequired();

                    b.Navigation("HabitosVida")
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("FisioMetric.Models.Entidades.Evolucao", b =>
                {
                    b.HasOne("FisioMetric.Models.Entidades.Paciente", "Paciente")
                        .WithMany("Evolucoes")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("FisioMetric.Models.Entidades.Paciente", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Evolucoes");
                });
#pragma warning restore 612, 618
        }
    }
}
